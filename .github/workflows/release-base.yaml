name: ðŸ§© Release Base

on:
  workflow_call:
    inputs:
      distribution:
        required: true
        type: string
    secrets:
      registry:
        required: false
      docker_hub_username:
        required: true
      docker_hub_password:
        required: true
      gpg_private_key:
        required: true
      gpg_passphrase:
        required: true
      github_token:
        required: true


jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # required for tag metadata

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          check-latest: true

      - name: Tidy go.mod files
        run: go mod tidy

      - name: Verify build
        run: make ci DISTRIBUTIONS=${{ inputs.distribution }}

      - name: Login to Docker
        uses: docker/login-action@v3
        if: ${{ env.ACT }}
        with:
          registry: docker.io
          username: ${{ secrets.docker_hub_username }}
          password: ${{ secrets.docker_hub_password }}

      - uses: docker/setup-qemu-action@v2

      - uses: docker/setup-buildx-action@v2

      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.gpg_private_key }}
          passphrase: ${{ secrets.gpg_passphrase }}

      - name: Write GPG to path in memory for signing rpm/deb
        id: write_gpg_to_path
        run: |
          GPG_KEY_PATH="$(mktemp /dev/shm/gpg.XXXXXX)"
          echo "$GPG_PRIVATE_KEY" | base64 -d >> "$GPG_KEY_PATH"
          echo "gpg_key_path=$GPG_KEY_PATH" >> $GITHUB_OUTPUT
        env:
          GPG_PRIVATE_KEY: ${{ secrets.gpg_private_key }}


      - name: Build binaries & packages with GoReleaser
        id: goreleaser
        uses: goreleaser/goreleaser-action@v6
        env:
          NFPM_PASSPHRASE: ${{ secrets.gpg_passphrase }}
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
          GPG_KEY_PATH: ${{ steps.write_gpg_to_path.outputs.gpg_key_path }}
          GITHUB_TOKEN: ${{ secrets.github_token }}
        with:
          distribution: goreleaser
          version: '~> v2'
          args: --clean --skip=announce --timeout 2h
          workdir: distributions/${{ inputs.distribution }}
      
      # - uses: actions/upload-artifact@v4
      #   with:
      #     name: release-artifacts-${{ inputs.distribution }}
      #     path: distributions/${{ inputs.distribution }}/dist/**/*
      #     if-no-files-found: error